package com.example.quest;

import java.io.Serializable;

public class QuestState implements Serializable {
    private String currentStep;
    private boolean gameOver;
    private String result;
    private String resultHistory;

    public QuestState() {
        this.currentStep = "start"; // STARTER //
        this.gameOver = false;
        this.result = "";
        this.resultHistory = "";
    }

    public String getCurrentStep() {
        return currentStep;
    }

    public void setCurrentStep(String currentStep) {
        this.currentStep = currentStep;
    }

    public boolean isGameOver() {
        return gameOver;
    }

    public void setGameOver(boolean gameOver) {
        this.gameOver = gameOver;
    }

    public String getResult() {
        return result;
    }

    public void setResult(String result) {
        this.result = result;
    }

    public boolean isWin() {
        return "Win".equalsIgnoreCase(resultHistory);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –≥—Ä–∞–≤—Ü—è
    public void processChoice(String choice) {
        if (gameOver) return;

        switch (currentStep) {
            case "start":
                if ("1".equals(choice)) {
                    currentStep = "forest";
                } else if ("2".equals(choice)) {
                    currentStep = "cave";
                } else if ("3".equals(choice)) {
                    currentStep = "river";
                }
                break;

            case "forest":
                if ("1".equals(choice)) {
                    currentStep = "cabin";
                } else if ("2".equals(choice)) {
                    currentStep = "pass";
                    gameOver = true;
                    result = "‚ùå –í–æ–≤–∫–∏ –Ω–∞–ø–∞–ª–∏ –Ω–∞ –≤–∞—Å. –ü–æ—Ä–∞–∑–∫–∞!";
                    resultHistory = "Def";
                }
                break;

            case "cave":
                if ("1".equals(choice)) {
                    currentStep = "left_cave";
                    gameOver = true;
                    result = "‚ùå –í–∏ –≤–ø–∞–ª–∏ –≤ —è–º—É –∑ —à–∏–ø–∞–º–∏. –ü–æ—Ä–∞–∑–∫–∞!";
                    resultHistory = "Def";
                } else if ("2".equals(choice)) {
                    currentStep = "right_cave";
                }
                break;

            case "river":
                if ("1".equals(choice)) {
                    currentStep = "boat";
                    gameOver = true;
                    result = "‚ùå –í–æ–¥—è–Ω–∏–π –º–æ–Ω—Å—Ç—Ä –ø–æ—Ç–æ–ø–∏–≤ —á–æ–≤–µ–Ω! –ü–æ—Ä–∞–∑–∫–∞!";
                    resultHistory = "Def";
                } else if ("2".equals(choice)) {
                    currentStep = "dive";
                }
                break;

            case "right_cave":
                if ("1".equals(choice)) {
                    currentStep = "big_gate";
                    gameOver = true;
                    result = "‚ùå –î—Ä–∞–∫–æ–Ω –æ—Ö–æ—Ä–æ–Ω—è—î –≤–æ—Ä–æ—Ç–∞! –ü–æ—Ä–∞–∑–∫–∞!";
                    resultHistory = "Def";
                } else if ("2".equals(choice)) {
                    currentStep = "hole";
                    gameOver = true;
                    result = "üèÜ –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å–∫–∞—Ä–±! –ü–µ—Ä–µ–º–æ–≥–∞!";
                    resultHistory = "Win";
                }
                break;

            case "dive":
                if ("1".equals(choice)) {
                    currentStep = "temple";
                    gameOver = true;
                    result = "üèÜ –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å–≤—è—â–µ–Ω–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç! –ü–µ—Ä–µ–º–æ–≥–∞!";
                    resultHistory = "Win";
                } else if ("2".equals(choice)) {
                    currentStep = "jungle";
                    gameOver = true;
                    result = "‚ùå –û—Ç—Ä—É–π–Ω—ñ –∑–º—ñ—ó –Ω–∞–ø–∞–ª–∏! –ü–æ—Ä–∞–∑–∫–∞!";
                    resultHistory = "Def";
                }
                break;

            default:
                gameOver = true;
                result = "–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!";
                break;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    public String getCurrentText() {
        switch (currentStep) {
            case "start":
                return "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç—Ä–∏ –¥–æ—Ä–æ–≥–∏:<br>" +
                        "1Ô∏è‚É£ –£–≤—ñ–π—Ç–∏ –≤ —Ç–µ–º–Ω–∏–π –ª—ñ—Å üå≤<br>" +
                        "2Ô∏è‚É£ –°–ø—É—Å—Ç–∏—Ç–∏—Å—è –≤ –∑–ª–æ–≤—ñ—Å–Ω—É –ø–µ—á–µ—Ä—É ‚õ∞Ô∏è<br>" +
                        "3Ô∏è‚É£ –ü—ñ—Ç–∏ –¥–æ –∑–∞–≥–∞–¥–∫–æ–≤–æ—ó —Ä—ñ—á–∫–∏ üåä";
            case "forest":
                return "üå≤ –í–∏ –∑–∞–π—à–ª–∏ –≤ —Ç–µ–º–Ω–∏–π –ª—ñ—Å. –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ö–∞—Ç–∏–Ω–∫–∞ —Ç–∞ –ø–µ—Ä–µ–≤–∞–ª.<br>" +
                        "1Ô∏è‚É£ –ó–∞–π—Ç–∏ –≤ —Ö–∞—Ç–∏–Ω–∫—É üèöÔ∏è<br>" +
                        "2Ô∏è‚É£ –ô—Ç–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–∞–ª üèîÔ∏è";
            case "cave":
                return "‚õ∞Ô∏è –í–∏ –∑–∞–π—à–ª–∏ –≤ –ø–µ—á–µ—Ä—É. –î–≤–∞ –ø—Ä–æ—Ö–æ–¥–∏ –≤–µ–¥—É—Ç—å —É–≥–ª–∏–±.<br>" +
                        "1Ô∏è‚É£ –ô—Ç–∏ –ª—ñ–≤–æ—Ä—É—á üîÑ<br>" +
                        "2Ô∏è‚É£ –ô—Ç–∏ –ø—Ä–∞–≤–æ—Ä—É—á ‚û°Ô∏è";
            case "river":
                return "üåä –í–∏ –ø—ñ–¥—ñ–π—à–ª–∏ –¥–æ —Ä—ñ—á–∫–∏. –Ñ —á–æ–≤–µ–Ω —Ç–∞ –ø—ñ–¥–≤–æ–¥–Ω–∞ –ø–µ—á–µ—Ä–∞.<br>" +
                        "1Ô∏è‚É£ –ü–µ—Ä–µ–ø–ª–∏—Å—Ç–∏ —á–æ–≤–Ω–æ–º ‚õµ<br>" +
                        "2Ô∏è‚É£ –ü—ñ—Ä–Ω—É—Ç–∏ –ø—ñ–¥ –≤–æ–¥—É üèä‚Äç‚ôÇÔ∏è";
            case "cabin":
                return "üèöÔ∏è –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å—Ç–∞—Ä–æ–≥–æ –º—É–¥—Ä–µ—Ü—è, –≤—ñ–Ω –¥–∞–≤ –≤–∞–º —á–∞—Ä—ñ–≤–Ω–∏–π –∞–º—É–ª–µ—Ç! <br>" +
                        "1Ô∏è‚É£ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —à–ª—è—Ö —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–∞–ª üèîÔ∏è";
            case "pass":
                return "‚ùå –í–æ–≤–∫–∏ –Ω–∞–ø–∞–ª–∏ –Ω–∞ –≤–∞—Å. –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞.";
            case "left_cave":
                return "‚ùå –í–∏ –≤–ø–∞–ª–∏ –≤ —è–º—É –∑ —à–∏–ø–∞–º–∏. –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞.";
            case "right_cave":
                return "üíé –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å—è—é—á–∏–π –∫–∞–º—ñ–Ω—å, —è–∫–∏–π –æ—Å–≤—ñ—Ç–ª—é—î —à–ª—è—Ö! <br>" +
                        "1Ô∏è‚É£ –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤–æ—Ä–æ—Ç–∞ üö™<br>" +
                        "2Ô∏è‚É£ –ü—Ä–æ–ª—ñ–∑—Ç–∏ —á–µ—Ä–µ–∑ –æ—Ç–≤—ñ—Ä üï≥Ô∏è";
            case "big_gate":
                return "‚ùå –î—Ä–∞–∫–æ–Ω –æ—Ö–æ—Ä–æ–Ω—è—î –≤–æ—Ä–æ—Ç–∞! –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞.";
            case "hole":
                return "üèÜ –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å–∫–∞—Ä–±! –í—ñ—Ç–∞—î–º–æ!";
            case "boat":
                return "‚ùå –í–æ–¥—è–Ω–∏–π –º–æ–Ω—Å—Ç—Ä –ø–æ—Ç–æ–ø–∏–≤ —á–æ–≤–µ–Ω! –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞.";
            case "dive":
                return "üèùÔ∏è –í–∏ –∑–Ω–∞–π—à–ª–∏ –ø—ñ–¥–≤–æ–¥–Ω–∏–π —Ö—ñ–¥ –¥–æ –æ—Å—Ç—Ä–æ–≤–∞! <br>" +
                        "1Ô∏è‚É£ –ü—ñ—Ç–∏ –¥–æ —Ö—Ä–∞–º—É üèõÔ∏è<br>" +
                        "2Ô∏è‚É£ –í–≥–ª–∏–± –¥–∂—É–Ω–≥–ª—ñ–≤ üå¥";
            case "temple":
                return "üèÜ –í–∏ –∑–Ω–∞–π—à–ª–∏ —Å–≤—è—â–µ–Ω–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç! –í—ñ—Ç–∞—î–º–æ!";
            case "jungle":
                return "‚ùå –û—Ç—Ä—É–π–Ω—ñ –∑–º—ñ—ó –Ω–∞–ø–∞–ª–∏! –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞.";
        }
        return "–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!";
    }
}
